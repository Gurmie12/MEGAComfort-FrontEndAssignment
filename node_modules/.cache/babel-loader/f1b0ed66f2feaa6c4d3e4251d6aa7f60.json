{"ast":null,"code":"var _jsxFileName = \"/Users/gurman/Documents/GitHub/MEGAComfort-FrontEndAssignment/src/pages/forms.js\";\nimport React, { useState, useEffect } from 'react';\nimport '../css/forms.css'; //Import the basic products and employees from the sales form with the class implementation incase of a localstorage reset\n\nimport { jeff, thomas, john, larry, freshLemonade, orangeSplash, sugaryShocker, wildWhiskey } from './sale'; //React component of the Form that allows retreival of all sales between dates and employees\n\nfunction Forms() {\n  //Global react hooks that dynamicaly change with user inputs\n  const [startDate, setStartDate] = useState(0);\n  const [endDate, setEndDate] = useState(0);\n  const [employees, setEmployees] = useState([]);\n  const [selectedEmployee, setSelectedEmployee] = useState('');\n  const [products, setProducts] = useState([]);\n  const [employeeInfo, setEmployeeInfo] = useState([]);\n  const [sales, setSales] = useState([]); //If local storage is empty push the default products and employees\n\n  if (localStorage.getItem('Employees') === null) {\n    localStorage.setItem('Employees', JSON.stringify([jeff, thomas, john, larry]));\n  }\n\n  if (localStorage.getItem('Products') === null) {\n    localStorage.setItem('Products', JSON.stringify([freshLemonade, orangeSplash, sugaryShocker, wildWhiskey]));\n  } //Life cycle component that fetches the local storage and sets it to the hook on refresh and changes\n\n\n  useEffect(() => {\n    setEmployees(JSON.parse(localStorage.getItem('Employees')));\n  }, [JSON.parse(localStorage.getItem('Employees')).length]);\n  useEffect(() => {\n    setProducts(JSON.parse(localStorage.getItem('Products')));\n  }, [JSON.parse(localStorage.getItem('Products')).length]);\n  useEffect(() => {\n    setSales(JSON.parse(localStorage.getItem('Sales')));\n  }, [JSON.parse(localStorage.getItem('Products')).length]); //Handles a dynamic change in selected employee\n\n  const handleSelectChange = e => {\n    let cur = JSON.parse(e.target.value);\n    setSelectedEmployee(cur);\n  }; //If the user submits form, set the start and end dates to a object and push that to the report generating function if the fields are not null\n\n\n  const handleReportClick = () => {\n    const start = document.getElementById('startDate');\n    const end = document.getElementById('endDate');\n\n    if (start.value === \"\" || end.value === \"\") {\n      showAlert('Please fill in all of the fields!', 'alert-danger');\n    } else {\n      const input = {\n        start: startDate,\n        end: endDate,\n        employee: selectedEmployee\n      };\n      generateReport(input);\n      showAlert('Input submited successfuly! Check below for results', 'alert-success');\n    }\n  }; //Filters the sales array in localstorage so that the new hook that carries filtered data is of that that includes attributes with the start and end date of the employee\n\n\n  function generateReport(input) {\n    let filtered = [];\n    sales.forEach(sale => {\n      if (sale.Employee.replace('\"', \"\").replace('\"', \"\") === input.employee.name) {\n        if (sale.date >= input.start && sale.date <= input.end) {\n          filtered.push(sale);\n        }\n      }\n    });\n    setEmployeeInfo(filtered);\n  } //Function that handles rendering of the sold items list\n\n\n  function soldItemsLister(sale) {\n    let items = [];\n    products.forEach(product => {\n      items.push(product.name.replace(/\\s/g, \"\"));\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, items.map((item, i) => {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 29\n        }\n      }, item.replace(/([A-Z])/g, ' $1').trim(), \": \", sale[item]);\n    }));\n  } // pointer function that returns that total of all filtered sales\n\n\n  const totalSold = () => {\n    let total = 0;\n\n    if (employeeInfo.length === 0) {\n      return total;\n    } else {\n      employeeInfo.map(sale => {\n        total += parseFloat(sale.Total);\n      });\n      return total.toFixed(2);\n    }\n  }; // pointer function that returns that total of all filtered commissions\n\n\n  function totalCommision() {\n    let total = 0;\n\n    if (employeeInfo.length === 0) {\n      return total;\n    } else {\n      employeeInfo.map(sale => {\n        total += parseFloat(sale.commisionMade);\n      });\n      return total.toFixed(2);\n    }\n  } //Pointer function that retuns the filtered data as a table if it is not null, if there exists no data with the specified attributes, then return there is no data\n\n\n  const renderInfo = () => {\n    if (employeeInfo.length === 0) {\n      return /*#__PURE__*/React.createElement(\"tdody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        className: \"text-centered\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"display-4 mt-4\",\n        id: \"not-avail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }\n      }, \"No Sales Are Available With the Specified Info\")));\n    } else {\n      return employeeInfo.map((sale, i) => {\n        return /*#__PURE__*/React.createElement(\"tbody\", {\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"th\", {\n          scope: \"row\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 33\n          }\n        }, sale.date), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 33\n          }\n        }, soldItemsLister(sale)), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 33\n          }\n        }, \"$\", sale.Total), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 33\n          }\n        }, \"$\", sale.commisionMade)));\n      });\n    }\n  }; //Function that handeles showing the alerts incase of missing fields or succesfull entries\n\n\n  function showAlert(message, className) {\n    const saleFormContainer = document.getElementById('card-body');\n    const saleForm = document.getElementById('retrieveInfoForm');\n    const div = document.createElement('div');\n    div.id = \"alert\";\n    div.className = \"alert center-text \" + className;\n    div.appendChild(document.createTextNode(message));\n\n    if (document.getElementById(\"alert\")) {\n      document.getElementById('alert').remove();\n      saleFormContainer.insertBefore(div, saleForm);\n      setTimeout(() => {\n        div.remove();\n      }, 5000);\n    } else {\n      saleFormContainer.insertBefore(div, saleForm);\n      setTimeout(() => {\n        div.remove();\n      }, 5000);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"EmployeeForm-body pb-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    id: \"employeeSalesForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-header text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    id: \"form-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 25\n    }\n  }, \"Retrieve Employee Information\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body text-center\",\n    id: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    id: \"retrieveInfoForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group row\",\n    id: \"dateRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mr-auto ml-5\",\n    id: \"start-col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"startDate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 37\n    }\n  }, \"Start Date\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    className: \"form-control\",\n    id: \"startDate\",\n    onChange: e => setStartDate(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ml-auto mr-5\",\n    id: \"end-col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"endDate\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 37\n    }\n  }, \"End Date\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    className: \"form-control\",\n    id: \"endDate\",\n    onChange: e => setEndDate(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group mx-4 mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    for: \"employee-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 33\n    }\n  }, \"Choose an Employee For the Report\"), /*#__PURE__*/React.createElement(\"select\", {\n    className: \"form-control mt-2\",\n    onChange: handleSelectChange,\n    defaultValue: JSON.stringify(employees[0]),\n    id: \"employee-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 33\n    }\n  }, employees.map((employeeInstance, i) => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      value: JSON.stringify(employeeInstance),\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 49\n      }\n    }, employeeInstance.name);\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"justify-content-center mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-warning\",\n    onClick: handleReportClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 33\n    }\n  }, \"Get Report!\")))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    className: \"thead\",\n    id: \"table-head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 29\n    }\n  }, \"Date\"), /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 29\n    }\n  }, \"Items Sold\"), /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 29\n    }\n  }, \"Total Price\"), /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 29\n    }\n  }, \"Commission Earned\"))), renderInfo(), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 25\n    }\n  }, \"Total\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 25\n    }\n  }, \"$\", totalSold()), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 25\n    }\n  }, \"$\", totalCommision())))));\n}\n\nexport default Forms;","map":{"version":3,"sources":["/Users/gurman/Documents/GitHub/MEGAComfort-FrontEndAssignment/src/pages/forms.js"],"names":["React","useState","useEffect","jeff","thomas","john","larry","freshLemonade","orangeSplash","sugaryShocker","wildWhiskey","Forms","startDate","setStartDate","endDate","setEndDate","employees","setEmployees","selectedEmployee","setSelectedEmployee","products","setProducts","employeeInfo","setEmployeeInfo","sales","setSales","localStorage","getItem","setItem","JSON","stringify","parse","length","handleSelectChange","e","cur","target","value","handleReportClick","start","document","getElementById","end","showAlert","input","employee","generateReport","filtered","forEach","sale","Employee","replace","name","date","push","soldItemsLister","items","product","map","item","i","trim","totalSold","total","parseFloat","Total","toFixed","totalCommision","commisionMade","renderInfo","message","className","saleFormContainer","saleForm","div","createElement","id","appendChild","createTextNode","remove","insertBefore","setTimeout","employeeInstance"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport '../css/forms.css';\n\n//Import the basic products and employees from the sales form with the class implementation incase of a localstorage reset\n\nimport {jeff, thomas, john, larry, freshLemonade, orangeSplash, sugaryShocker, wildWhiskey} from './sale';\n\n//React component of the Form that allows retreival of all sales between dates and employees\n\nfunction Forms(){\n\n    //Global react hooks that dynamicaly change with user inputs\n\n    const [startDate, setStartDate] = useState(0);\n    const [endDate, setEndDate] = useState(0);\n    const [employees, setEmployees] = useState([]);\n    const [selectedEmployee, setSelectedEmployee] = useState('');\n    const [products, setProducts] = useState([]);\n    const [employeeInfo, setEmployeeInfo] = useState([]);\n    const [sales, setSales] = useState([]);\n\n    //If local storage is empty push the default products and employees\n\n    if(localStorage.getItem('Employees') === null){\n        localStorage.setItem('Employees', JSON.stringify([jeff, thomas, john, larry]));\n    }\n    \n    if(localStorage.getItem('Products') === null){\n        localStorage.setItem('Products', JSON.stringify([freshLemonade, orangeSplash, sugaryShocker, wildWhiskey]));\n    }\n\n    //Life cycle component that fetches the local storage and sets it to the hook on refresh and changes\n    useEffect(() =>{\n        setEmployees(JSON.parse(localStorage.getItem('Employees')));\n    }, [JSON.parse(localStorage.getItem('Employees')).length])\n\n    useEffect(() =>{\n        setProducts(JSON.parse(localStorage.getItem('Products')));\n    }, [JSON.parse(localStorage.getItem('Products')).length])\n\n    useEffect(() =>{\n        setSales(JSON.parse(localStorage.getItem('Sales')));\n    }, [JSON.parse(localStorage.getItem('Products')).length])\n\n    //Handles a dynamic change in selected employee\n\n    const handleSelectChange = (e) =>{\n        let cur = JSON.parse(e.target.value);\n        setSelectedEmployee(cur); \n    }\n\n    //If the user submits form, set the start and end dates to a object and push that to the report generating function if the fields are not null\n\n    const handleReportClick = () =>{\n        const start = document.getElementById('startDate');\n        const end = document.getElementById('endDate');\n        if(start.value === \"\" || end.value === \"\"){\n            showAlert('Please fill in all of the fields!', 'alert-danger');\n        }else{\n            const input = {\n                start: startDate,\n                end: endDate,\n                employee: selectedEmployee\n            }\n            generateReport(input);\n            showAlert('Input submited successfuly! Check below for results', 'alert-success');\n        }\n    }\n\n    //Filters the sales array in localstorage so that the new hook that carries filtered data is of that that includes attributes with the start and end date of the employee\n    function generateReport(input){\n        let filtered = [];\n        sales.forEach(sale =>{\n            if(sale.Employee.replace('\"', \"\").replace('\"', \"\") === input.employee.name){\n                if(sale.date >= input.start && sale.date <= input.end){\n                    filtered.push(sale);\n                }\n            }\n        })\n        setEmployeeInfo(filtered)\n    }\n\n    //Function that handles rendering of the sold items list\n    function soldItemsLister(sale){\n        let items = [];\n        products.forEach(product =>{\n            items.push(product.name.replace(/\\s/g, \"\"));\n        })\n\n        return(\n            <div>\n                {\n                    items.map((item,i) =>{\n                        return(\n                            <p key={i}>{item.replace(/([A-Z])/g, ' $1').trim()}: {sale[item]}</p>\n                        )\n                    })\n                }\n            </div>\n        )\n    }\n\n    // pointer function that returns that total of all filtered sales\n\n    const totalSold = () =>{\n        let total = 0;\n        if(employeeInfo.length === 0){\n            return total;\n        }else{\n            employeeInfo.map(sale =>{\n                total += parseFloat(sale.Total)\n            })\n    \n            return total.toFixed(2);\n        }\n    }\n\n    // pointer function that returns that total of all filtered commissions\n\n    function totalCommision(){\n        let total = 0;\n        if(employeeInfo.length === 0){\n            return total;\n        }else{\n            employeeInfo.map(sale =>{\n                total += parseFloat(sale.commisionMade);\n            })\n    \n            return total.toFixed(2);\n        }\n    }\n\n    //Pointer function that retuns the filtered data as a table if it is not null, if there exists no data with the specified attributes, then return there is no data\n\n    const renderInfo = () =>{\n        if(employeeInfo.length === 0){\n            return(\n                <tdody>\n                    <tr className=\"text-centered\">\n                        <h1 className=\"display-4 mt-4\" id=\"not-avail\">No Sales Are Available With the Specified Info</h1>\n                    </tr>\n                </tdody>\n            )\n        }else{\n            return(\n                employeeInfo.map((sale,i) =>{\n                    return(\n                        <tbody key={i}>\n                            <tr>    \n                                <th scope=\"row\" >{sale.date}</th > \n                                <td>\n                                    {soldItemsLister(sale)}\n                                </td>\n                                <td>${sale.Total}</td>\n                                <td>${sale.commisionMade}</td>\n                            </tr>\n                        </tbody>\n                    )\n                })\n            )\n        }\n    }\n\n    //Function that handeles showing the alerts incase of missing fields or succesfull entries\n    \n    function showAlert(message, className){\n        const saleFormContainer = document.getElementById('card-body');\n        const saleForm = document.getElementById('retrieveInfoForm');\n        const div = document.createElement('div');\n        div.id = \"alert\";\n        div.className = \"alert center-text \" + className;\n        div.appendChild(document.createTextNode(message));\n\n        if(document.getElementById(\"alert\")){\n            document.getElementById('alert').remove();\n            saleFormContainer.insertBefore(div, saleForm);\n            setTimeout(() =>{\n                div.remove();\n            }, 5000);\n        }else{\n            saleFormContainer.insertBefore(div, saleForm);\n            setTimeout(() =>{\n                div.remove();\n            }, 5000);\n        }\n    }\n\n    return(\n        <div className=\"EmployeeForm-body pb-5\">\n            <div className=\"container\">\n                <div className=\"card\" id=\"employeeSalesForm\">\n                    <div className=\"card-header text-center\">\n                        <p className=\"lead\" id=\"form-title\">\n                            Retrieve Employee Information\n                        </p>\n                    </div>\n                    <div className=\"card-body text-center\" id=\"card-body\">\n                        <form id=\"retrieveInfoForm\">\n                            <div className=\"form-group row\" id=\"dateRow\">\n                                <div className=\"mr-auto ml-5\" id=\"start-col\">   \n                                    <label for=\"startDate\">Start Date</label>\n                                    <input type=\"date\" className=\"form-control\" id=\"startDate\" onChange={e => setStartDate(e.target.value)}></input>\n                                </div>\n                                <div className=\"ml-auto mr-5\" id=\"end-col\">\n                                    <label for=\"endDate\">End Date</label>\n                                    <input type=\"date\" className=\"form-control\" id=\"endDate\" onChange={e => setEndDate(e.target.value)}></input>\n                                </div>\n                            </div>\n                            <div className=\"form-group mx-4 mt-5\">\n                                <label for=\"employee-selector\">\n                                    Choose an Employee For the Report\n                                </label>\n                                <select className=\"form-control mt-2\" onChange={handleSelectChange} defaultValue={JSON.stringify(employees[0])} id=\"employee-selector\">\n                                    {\n                                        employees.map((employeeInstance,i) =>{\n                                            return(\n                                                <option value={JSON.stringify(employeeInstance)} key={i}>{employeeInstance.name}</option>\n                                            )\n                                    })\n                                    }\n                                </select>\n                            </div>\n                            <div className=\"justify-content-center mt-5\">\n                                <button type=\"button\" className=\"btn btn-warning\" onClick={handleReportClick}>Get Report!</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container mt-5\">\n                <table className=\"table\">\n                    <thead className=\"thead\" id=\"table-head\">\n                        <tr>\n                            <th scope=\"col\">Date</th>\n                            <th scope=\"col\">Items Sold</th>\n                            <th scope=\"col\">Total Price</th>\n                            <th scope=\"col\">Commission Earned</th>\n                        </tr>\n                    </thead>\n                    {\n                        renderInfo()\n                    }\n                    <tr>\n                        <th scope=\"row\">Total</th>\n                        <td></td>\n                        <td>${totalSold()}</td>\n                        <td>${totalCommision()}</td>\n                    </tr>\n                </table>\n            </div>\n        </div>\n    )\n}\n\nexport default Forms;"]},"metadata":{},"sourceType":"module"}